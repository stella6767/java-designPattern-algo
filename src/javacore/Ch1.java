package javacore;

public class Ch1 {

    /**
     * 자바, 프로그래밍 언어에 대해서
     *
     * 기계는 바이너리로 통신. 프로그래밍 언어. C, C++, C#, JAVA, Python ...
     *
     * 컴파일 언어(C, C++ ...) -  컴파일러를 이용해 전체 코드를 한 번에 기계어로 번역을 하는 거에요.
     *
     * 인터프리터 언어(Python, Javascript..) - 코드 한 줄 씩, 기계어로 번역하는 방식. 번역과 실행이 동시에 이루어짐. 별도의 실행파일이 안 생김. 별도의 컴파일 단계 X
     *
     * 일반적으로는 실행 속도는 컴파일 언어가 빠르고, 생산 속도는 인터프리터 언어가 빠르다고 얘기를 해요.
     *
     * JAVA는 두 가지 혼재되어있습니다.
     *
     * JRE: 자바 런타임 환경, 자바 가상머신(JVM) 및 자바 클래스 라이브러리 등 컴파일 된, 자바 프로그램을 실행하는데 필요한 패키지
     * JDK: 자바를 사용하기 위해 필요한 기능을 갖춘 SDK, 컴파일러(javac),... 같은 것들이 포함
     * 보통은 자바프로그램을 실행하는데만 포커스를 두면, JRE만 있으면 되요.
     * 원래는 둘이 나눠져있었는데, 자바11 ? 이후부터는 JDK 안에 JRE가 포함되어있어요.
     *
     * 자바란 언어자체는 무료. 자바로 개발할 떄 쓰는 툴인 JDK 중에서 Oracle JDK가 유료(상용에서 쓸 시), OpenJDK
     *
     * 개발자가 .java 파일을 생성 -> build -> javac를 통해서 바이트코드(.class) 생성 -> class Loader를 통해 JVM 내로 로드 -> 실행엔진을 통해, 컴퓨터가
     * 읽을 수 있는 기계어로 해석되어 Runtime Data area 에 배치
     *
     *  Execution Engine,
     *  interpreter와 JIT Compiler 방식이 있다.
     *
     *  왜 이렇게 3단계 과정을 거치나. CPU가 이해할 수 있어야 됨. 근데 CPU 제조사마다 기계어가 다르다!
     *  intel CPU, AMD CPU 같은 명령을 수행한다고 하더라도 기계어가 다를 수 있음.
     * 운영체제마다 커널이 다르니까 , 운영체제에 따라서도 소스코드는 동일해도 실행파일이 안 먹힐 수 있음.
     * 일반적인 컴파일 언어는 플랫폼에 종속적.
     *
     * 자바 같은 경우는 플랫폼에 독립적이라고 얘기를 해요. JVM 떄문에.
     * 당연히 JVM 자체는 플랫폼에 종속적,
     *
     *
     *
     */


    public static void main(String[] args) {

        System.out.println("Hello world");
    }



}

