package javacore.basic;

public class Ch1 {

    /**
     * 프로그래밍 언어. = C, C++, JAVA, Python ....
     * 기계는 바이너리로 대화. 어셈블리어.
     *
     * 컴파일(C, C++..)  - 프로그래밍 언어를 Runtime 이전에 전체 코드를 한 번에 기계어로 번역을 하는 거.
     *
     * 인터프리터(python, JAvascript..) - 코드 한 줄 씩, 기계어로 번역. 번역과 실행이 동시에 이루어짐. 별도의 컴파일 단계 X, 별도의 실행파일이 생기지 않음
     *
     * 일반적으로는 실행 속도는 컴파일 언어가 빠르고, 생산 속도는 인터프리터 언어가 빠르다고 이야기를 해요.
     *
     * JAVA는 2 가지 컨셉이 혼재
     *
     * JRE: 자바 런타임 환경, 자바가상머신(JVM) 및 자바 클래스 라이브러리 등, 컴파일 된 자바 프로그램을 실행하는 데 필요한 패키지
     *
     * JDK: 자바를 사용하기 위해 필요한 기능을 갖춘 SDK. 컴파일러(javac) ... 등등이 포함되어 있음
     * 보통은 자바프로그램을 실행하는데 만 포커스를 두면 JRE만 있음.
     *
     * 원래는 둘이 나눠져 있었는데, 자바 11? 이후부터는 JDK 안에 JRE가 포함되어있습니다.
       자바란 언어자체는 무료. 자바로 개발할 때 쓰는 Oracle JDK가 유료 (상용에서 쓸 시), OpenJDK


     *
     *  가장 많이 쓰이는 건 8, LTS
     *
     * 개발자가 .java 파일을 생성 -> javac를 통해서 바이트코드(.class) 생성 -> class loader를 통해 JVM 내로 로드 -> 실행엔진을 통해서
     * 컴퓨터가 읽을 수 있는 기계어로 해석이 됨.
     *
     * Execution Engine - class loader로부터 받은 runtime data area에 있는 .class(바이트코드) 를 기계어로 변환시켜서 해석.
     * 바이트 코드를 읽어서 조각 별로 실행.
     * interpreter , 반복코드를 발견하면 JIT 컴파일러를 사용하여 전체 바이트 코드를 컴파일하고 원시코드로 변경
     *
     * 기계어는 CPU가 이해할 수 있어야 됨. 근데 CPU 제조사마다 기계어가 다르다!
     * intel cpu, amd cpu 같은 명령을 수행하더라도 기계어가 다를 수 있음.
     * 우리가 게임을 다운받을 때, 윈도우 버전, 맥 버전을 따로 받는 것처럼.
     * 운영체제에도 영향을 받는다. 운영체제마다 커널이 다르니까, 소스코드는 동일해도 실행파일이 다를 수 있음.
     * 자바 같은 경우는 플랫폼에 독립적이라고 이야기를 함. 왜? JVM 때문에
     *
     * 당연히 JVM 자체는 플랫폼에 종속적. 높은 이식성.
     *
     *
     */


    public static void main(String[] args) {
        System.out.println("Hello World!!!");
    }


}
